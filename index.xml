<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arthur Santana</title>
    <link>https://arthursantana.github.io/</link>
    <description>Recent content on Arthur Santana</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 24 Aug 2016 08:27:43 -0300</lastBuildDate>
    <atom:link href="https://arthursantana.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Derivation of the Isometric Projection Formula</title>
      <link>https://arthursantana.github.io/posts/iso/</link>
      <pubDate>Wed, 24 Aug 2016 08:27:43 -0300</pubDate>
      
      <guid>https://arthursantana.github.io/posts/iso/</guid>
      <description>

&lt;p&gt;This post was inspired by some discussion on &lt;a href=&#34;http://bannalia.blogspot.com.br/2008/02/filmation-math.html&#34;&gt;this cool 2008 article&lt;/a&gt; by Joaquín M. López Muñoz. Having just recently watched &lt;a href=&#34;http://ocw.mit.edu/courses/mathematics/18-06-linear-algebra-spring-2010/&#34;&gt;Gilbert Strang&amp;rsquo;s OCW Linear Algebra course&lt;/a&gt;, I could not resist trying to prove the projection formula in Joaquín&amp;rsquo;s article.&lt;/p&gt;

&lt;h2 id=&#34;definition-of-the-problem&#34;&gt;Definition of the problem&lt;/h2&gt;

&lt;p&gt;If you don&amp;rsquo;t know what an isometric projection is, please check the &lt;a href=&#34;https://en.wikipedia.org/wiki/Isometric_projection&#34;&gt;Wikipedia article&lt;/a&gt; for a nice introduction. Here I&amp;rsquo;ll try to define it in terms of vectors.&lt;/p&gt;

&lt;p&gt;First, consider the vector &lt;code&gt;$z$&lt;/code&gt; equal to &lt;code&gt;$\begin{bmatrix}1&amp;amp;1&amp;amp;1\end{bmatrix}^T$&lt;/code&gt;. Now let &lt;code&gt;$P$&lt;/code&gt; be the plane normal to &lt;code&gt;$z$&lt;/code&gt; that crosses the origin. We can choose vectors &lt;code&gt;$x$&lt;/code&gt; and &lt;code&gt;$y$&lt;/code&gt; such that they form an orthogonal basis for &lt;code&gt;$P$&lt;/code&gt; and such that the &lt;a href=&#34;https://en.wikipedia.org/wiki/Orthographic_projection&#34;&gt;orthographic projection&lt;/a&gt; (what we usually understand by the projection of a vector) of &lt;code&gt;$k$&lt;/code&gt; on &lt;code&gt;$P$&lt;/code&gt; is proportional to &lt;code&gt;$y$&lt;/code&gt;, with a positive multiplicative constant.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://arthursantana.github.io/axes.png&#34; alt=&#34;Axes on place&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Please note:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the &lt;code&gt;$z$&lt;/code&gt; vector is orthogonal to your monitor.&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;$k$&lt;/code&gt; vector is &lt;em&gt;not&lt;/em&gt; parallel to your monitor. It is pointing slightly to you, just as much as &lt;code&gt;$i$&lt;/code&gt; and &lt;code&gt;$j$&lt;/code&gt;. That&amp;rsquo;s what isometry is about, if you rotated the axes 120 degrees around the line in the direction of &lt;code&gt;$z$&lt;/code&gt;, you would have the same picture, just changing the names of the vectors.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m using a right-handed coordinate system. Using left-handed coordinates would switch the signs in our final projection matrix.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now we have a perfect model of what we wanted: we have a camera looking at the origin, aligned vertically, equally close to each of the axes. If we were rendering a scene, we would translate the camera around, but we wouldn&amp;rsquo;t change the vectors that determine the direction and rotation around &lt;code&gt;$z$&lt;/code&gt;. We also have an orthogonal basis for the screen, which allows us to locate projected vectors correctly.&lt;/p&gt;

&lt;p&gt;But there&amp;rsquo;s a catch: if we choose just any arbitrary vectors for the basis, we might end up with the wrong image. If &lt;code&gt;$x$&lt;/code&gt; and &lt;code&gt;$y$&lt;/code&gt; have different norms, the image will be stretched vertically or horizontally, depending on whose norm is bigger. Because of this, we will choose vectors with the same norm. Specifically, we&amp;rsquo;ll choose them with norm one, which will make calculations easier later on.&lt;/p&gt;

&lt;p&gt;Also note that &lt;code&gt;$z$&lt;/code&gt; is not normalized. We will normalize it too, so that we have a full orthonormal basis for &lt;code&gt;$\mathbb{R^3}$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To choose our vectors, let&amp;rsquo;s consider the unit vectors in each direction of the canonical basis,
&lt;div&gt;$$
\hat{i} =
\begin{bmatrix}
1\\ 0\\ 0
\end{bmatrix},
\hat{j} =
\begin{bmatrix}
0\\ 1\\ 0
\end{bmatrix},
\hat{k} =
\begin{bmatrix}
0\\ 0\\ 1
\end{bmatrix}
$$&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Now we define tree vectors &lt;code&gt;$a = \hat{k}-\hat{i}$&lt;/code&gt;, &lt;code&gt;$b = \hat{k}-\hat{j}$&lt;/code&gt; and &lt;code&gt;$c = \hat{j}-\hat{i}$&lt;/code&gt;, all in &lt;code&gt;$P$&lt;/code&gt;, as in the image below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://arthursantana.github.io/unitvectors.png&#34; alt=&#34;Choosing our basis&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We can then set &lt;code&gt;$\hat{x}$&lt;/code&gt; to be the normalized &lt;code&gt;$c$&lt;/code&gt;, and &lt;code&gt;$\hat{y}$&lt;/code&gt; to be the normalized result of &lt;code&gt;$a + b$&lt;/code&gt;. We use hats from now on to make it explicit that these vectors have norm equal to one (I&amp;rsquo;ll keep the ambiguity in this phrase because it sounds funny).&lt;/p&gt;

&lt;p&gt;Thus we have (calculations omitted, just divide by the norm to make the vectors into unit vectors):&lt;/p&gt;

&lt;div&gt;$$
\hat{x} =
\begin{bmatrix}
-\sqrt{2}/2\\ \sqrt{2}/2\\ 0
\end{bmatrix},
\hat{y} =
\begin{bmatrix}
-\sqrt{6}/6\\ -\sqrt{6}/6\\ \sqrt{6}/3
\end{bmatrix},
\hat{z} =
\begin{bmatrix}
\sqrt{3}/3\\ \sqrt{3}/3\\ \sqrt{3}/3
\end{bmatrix}
$$&lt;/div&gt;


&lt;p&gt;You can check that &lt;code&gt;$x$&lt;/code&gt;, &lt;code&gt;$y$&lt;/code&gt; and &lt;code&gt;$z$&lt;/code&gt; are all orthogonal to each other (inner products are equal to 0) and have norm one.&lt;/p&gt;

&lt;p&gt;Now that we have an orthonormal basis aligned to the screen, we can define the problem easily:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Given a vector &lt;code&gt;$v$&lt;/code&gt; expressed in the canonical basis, we want it&amp;rsquo;s projection on &lt;code&gt;$P$&lt;/code&gt;, expressed in terms of &lt;code&gt;$x$&lt;/code&gt;, &lt;code&gt;$y$&lt;/code&gt; and &lt;code&gt;$z$&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Actually, the &lt;code&gt;$z$&lt;/code&gt; part will always be zero, since &lt;code&gt;$z$&lt;/code&gt; is the component orthogonal to the plane. Projecting a vector on &lt;code&gt;$P$&lt;/code&gt; is equivalent to zeroing this component, and that&amp;rsquo;s how we are going to do it.&lt;/p&gt;

&lt;h2 id=&#34;change-of-basis&#34;&gt;Change of basis&lt;/h2&gt;

&lt;p&gt;Now we need to convert &lt;code&gt;$v$&lt;/code&gt; into terms of our new basis. First, notice that the matrix
&lt;div&gt;$$
M=
\left[
\begin{array}{c|c|c}
x &amp; y &amp; z
\end{array}
\right]
=
\begin{bmatrix}
-\sqrt{2}/2&amp; -\sqrt{6}/6&amp; \sqrt{3}/3\\
\sqrt{2}/2&amp; -\sqrt{6}/6&amp; \sqrt{3}/3\\
0&amp; \sqrt{6}/3&amp; \sqrt{3}/3\\
\end{bmatrix}
$$&lt;/div&gt;

is the matrix that transforms from the description in terms of the new basis into the canonical description. What we need is its inverse, &lt;code&gt;$M^{-1}$&lt;/code&gt;. Fortunately, we have constructed M in such a way that it is orthogonal, and therefore it has the key property:
&lt;div&gt;$$
M^TM=I
$$&lt;/div&gt;

That is, &lt;code&gt;$M^{-1} = M^T$&lt;/code&gt;. We only need to multiply &lt;code&gt;$M^Tv$&lt;/code&gt; to find &lt;code&gt;$v$&lt;/code&gt; in our new basis. Also, because we don&amp;rsquo;t care about the &lt;code&gt;$z$&lt;/code&gt; component, we can simply select the first two rows of &lt;code&gt;$M^{-1}$&lt;/code&gt;. The projection is automatic, because it is orthographic. Here is our transformation matrix:&lt;/p&gt;

&lt;div&gt;$$
\begin{bmatrix}
-\sqrt{2}/2&amp; \sqrt{2}/2&amp; 0\\
-\sqrt{6}/6&amp; -\sqrt{6}/6&amp; \sqrt{6}/3
\end{bmatrix}
$$&lt;/div&gt;


&lt;p&gt;We can simplify this by scaling down the whole image (dividing) by &lt;code&gt;$\sqrt{6}/6$&lt;/code&gt; to get our final transformation matrix:
&lt;div&gt;$$
\begin{bmatrix}
-\sqrt{3}&amp; \sqrt{3}&amp; 0\\
-1&amp; -1&amp; 2
\end{bmatrix}
$$&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Notice that this is the same transformation in Joaquín&amp;rsquo;s original post, except for a scaling constant of 2. Also notice that it&amp;rsquo;s the same matrix given in Wikipedia&amp;rsquo;s proof using rotation matrices (I have no idea how they came up with that crazy angle of 35.264º. If you know, please tell me).&lt;/p&gt;

&lt;h2 id=&#34;quick-note-on-projection-matrices&#34;&gt;Quick note on projection matrices&lt;/h2&gt;

&lt;p&gt;The first time I tried to prove this result, I actually calculated the projection matrix &lt;code&gt;$R = A(A^TA)^{-1}A^T$&lt;/code&gt;, that produces the projected vector in terms of the original canonical basis. After that, I found that I had to convert to the screen basis, using the matrix &lt;code&gt;$M^{-1}$&lt;/code&gt; that we found above. When I tried to compose the transformations, something remarkable came up: &lt;code&gt;$R*M^{-1}$&lt;/code&gt; is &lt;em&gt;equal&lt;/em&gt; to &lt;code&gt;$M^{-1}$&lt;/code&gt;, only with last row zeroed! This is exactly what we should expect, and is why we don&amp;rsquo;t need to do the projection in 3 dimensions at all. By changing to a basis which has a component orthogonal to the plane, we can simply discard this component.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This was a nice application of basic linear algebra. The proof is really simple, once you find how to select the correct vectors for the basis.&lt;/p&gt;

&lt;p&gt;In the future, I hope to write about GPU z-buffers and how to render sprites in an isometric game without using a topological sort. Before that, though, I have to make it work.&lt;/p&gt;

&lt;p&gt;Please comment below if you have anything to add.&lt;/p&gt;

&lt;script type=&#34;text/javascript&#34;
  src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>Testing Hugo!</title>
      <link>https://arthursantana.github.io/posts/test/</link>
      <pubDate>Wed, 24 Aug 2016 01:06:27 -0300</pubDate>
      
      <guid>https://arthursantana.github.io/posts/test/</guid>
      <description>

&lt;h1 id=&#34;biiiig-header&#34;&gt;Biiiig header&lt;/h1&gt;

&lt;h2 id=&#34;this-post-is-going-to-be-removed-please-comment-below&#34;&gt;This post is going to be removed. Please comment below!&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m testing. I don&amp;rsquo;t remember how to write markdown. And I want mathjax to work.&lt;/p&gt;

&lt;p&gt;Inline math here: &lt;code&gt;$ 2 &amp;lt; 3 $&lt;/code&gt; (it works!)&lt;/p&gt;

&lt;p&gt;Now for big math:
&lt;div&gt;$$
 \begin{bmatrix}
  1 &amp; 0 &amp; 0 \\
  0 &amp; 1 &amp; 0 \\
  0 &amp; 0 &amp; 1
 \end{bmatrix}
 \begin{bmatrix}
  1 &amp; 0 &amp; 0 \\
  0 &amp; 1 &amp; 0 \\
  0 &amp; 0 &amp; 1
 \end{bmatrix}
=
 \begin{bmatrix}
  1 &amp; 0 &amp; 0 \\
  0 &amp; 1 &amp; 0 \\
  0 &amp; 0 &amp; 1
 \end{bmatrix} \\
\\
\forall x \in X, \quad \exists y \leq \epsilon
$$&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;ok-now-some-c-code&#34;&gt;Ok, now some C code&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;then-go-code&#34;&gt;Then Go code&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;x&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;then-bash&#34;&gt;Then Bash&lt;/h3&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;ls &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;nothing&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3 id=&#34;even-easier-bash&#34;&gt;Even easier Bash&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;  $ ls | grep &amp;quot;nothing&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;script type=&#34;text/javascript&#34;
  src=&#34;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;

</description>
    </item>
    
    <item>
      <title>about</title>
      <link>https://arthursantana.github.io/about/</link>
      <pubDate>Wed, 24 Aug 2016 00:09:46 -0300</pubDate>
      
      <guid>https://arthursantana.github.io/about/</guid>
      <description>&lt;p&gt;I am a brazilian developer and entrepreneur. I dropped out of the Computer Science course at the Institute of Mathematics and Statistics of the University of São Paulo to work on my company, but I hope to get back to it soon.&lt;/p&gt;

&lt;p&gt;These days I am really interested in machine learning and continuous optimization. I also like game developing, but don&amp;rsquo;t take it seriously.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>